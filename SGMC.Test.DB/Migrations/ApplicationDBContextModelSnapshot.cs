// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SGMC.Test.DB;

#nullable disable

namespace SGMC.Test.DB.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SGMC.Test.DB.Entities.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("link_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("count_parents");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("ParentId", "NomenclatureId")
                        .IsUnique()
                        .HasDatabaseName("UQ_links_parent_id_nomenclature_id");

                    b.ToTable("links", null, t =>
                        {
                            t.HasCheckConstraint("CK_links_count_parents", "count_parents >= 0");
                        });
                });

            modelBuilder.Entity("SGMC.Test.DB.Entities.Nomenclature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_nomenclatures_name");

                    b.ToTable("nomenclatures", null, t =>
                        {
                            t.HasCheckConstraint("CK_nomenclatures_price", "price >= 0.0");
                        });
                });

            modelBuilder.Entity("SGMC.Test.DB.Entities.ProductMetaData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("product_metadata_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("property_name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId", "PropertyName")
                        .IsUnique()
                        .HasDatabaseName("UQ_product_metadata_nomenclature_property_name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("NomenclatureId", "PropertyName"), new[] { "Value" });

                    b.ToTable("product_metadata", (string)null);
                });

            modelBuilder.Entity("SGMC.Test.DB.Entities.Link", b =>
                {
                    b.HasOne("SGMC.Test.DB.Entities.Nomenclature", "Nomenclature")
                        .WithMany("Parents")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGMC.Test.DB.Entities.Nomenclature", "Parent")
                        .WithMany("Child")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SGMC.Test.DB.Entities.ProductMetaData", b =>
                {
                    b.HasOne("SGMC.Test.DB.Entities.Nomenclature", "Nomenclature")
                        .WithMany("MetaData")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");
                });

            modelBuilder.Entity("SGMC.Test.DB.Entities.Nomenclature", b =>
                {
                    b.Navigation("Child");

                    b.Navigation("MetaData");

                    b.Navigation("Parents");
                });
#pragma warning restore 612, 618
        }
    }
}
